--параметрический полиморфизм
module Demo2_1 where
  
import Data.Function
 
--полиморфная 
id x = x

k x y = x

getSecondFrom :: t1 -> t2 -> t3 -> t2
getSecondFrom a b c = b

---------

--мономорфная ф-ция (ограниченный полиморфизм)
mono :: Char -> Char
mono x = x

--частично ограниченный полиморфизм - полиморфная по 2-му аргументу, мономорфная по 1-му аргументу
semiMono :: Char -> a -> Char
semiMono x y = x

--выводится наиболее общий тип: semiMono2 :: t1 -> t -> t1
--Алгоритм Damas–Hindley–Milner
semiMono2 x y = x

---------

--функции высших порядков

apply2 f x = f (f x)

--сечение оператора +
--apply2 (+5) 22 => 32
--apply2 (++"AB") "CD" => "CDABAB"

--стандартная ф-ция flip
--flip f y x = f x y
--flip (/) 4 2 => 0.5
--flip const 5 True => True

---------

--Data.Function:
--on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
--on op f x y = f x `op` f y
--op - бинарный оператор с однотипными аргументами (типа b)
--f :: a -> b - ф-ция возвращающая значение типа b
--x, y - два значения типа a. 
--on применяет f к двум значениям типа a и передает результат в бинарный оператор.

--функция суммирования квадратов аргументов
sumSquares = (+) `on` (^2)

--Функция multSecond, перемножающая вторые элементы пар
multSecond = g `on` h
g = (*)
h = snd

----------
--Анонимные ф-ции

--let f x = 2 * x + 7

-- "\" читается "лямбда"; x - имя связываемой переменной
-- \x -> 2 * x + 7
-- такая ф-ция аналогична f x выше, но она не имеет имени: анонимная ф-ция или лямбда-ф-ция
-- (\x -> 2 * x + 7) 10 => 27

--let f' = \x -> 2 * x + 7

lenVec x y = sqrt $ x^2 + y^2
lenVec' x = \y -> sqrt $ x^2 + y^2
lenVec'' = \x -> \y -> sqrt $ x^2 + y^2
lenVec''' = \x y -> sqrt $ x^2 + y^2

--пара пар
--let p1 = ((1, 2), (3, 4))
--let p2 = ((3, 4), (5, 6))

--сумма первых элементов первых пар
sumFstFst = (+) `on` helper
  where helper pp = fst $ fst pp
  
sumFstFst' = (+) `on` (\pp -> fst $ fst pp)

----------

--Реализуйте функцию on3, имеющую семантику, схожую с on, но принимающую в качестве первого аргумента трехместную функцию:

on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
on3 op f x y z = (op) (f x) (f y) (f z)

--Например, сумма квадратов трех чисел может быть записана с использованием on3 так
sum3squares = (\x y z -> x+y+z) `on3` (^2)
